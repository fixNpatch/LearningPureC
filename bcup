#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <getopt.h>

typedef enum{
    BM_ITER,
    BM_REC,
} brute_mode_t;

typedef struct config_t{
    char * alph;
    int length;
    brute_mode_t brute_mode;
} config_t;

void rec_brute(char * password, int pos, config_t * config){
    int i;
    if(pos == config->length)
        printf("%s\n", password);
    else 
        for(i = 0; config->alph[i]; i++){
            password[pos] = config->alph[i];
            rec_brute(password, pos + 1, config);
        }
}

void ite_brute(config_t * config){
    int alph_length_1 = strlen(config->alph) - 1;
    int idx[config->length];
    char password[config->length + 1];
    int i;
    password[config->length] = 0;
    
    for(i = 0; i < config->length; i++){
        idx[i] = 0;
        password[i] = config->alph[0];
    }
    for(;;){
        printf("%s\n", password);
        for(i = config->length - 1; (i>=0)&&(idx[i] == alph_length_1); i--){
            idx[i] = 0;
            password[i] = config->alph[0];
        }
        if(i < 0)
            break;
        password[i] = config->alph[++idx[i]];
    }
}


void parse_params (config_t * config, int argc, char * argv[])
{
    int opt;
    while ((opt = getopt(argc, argv, "a:l:ir")) != -1){
        switch (opt){
            case 'i':
                config->brute_mode = BM_ITER;
                break;
            case 'r':
                config->brute_mode = BM_REC;
                break;
            case 'a':
                config->alph = optarg;
                break;
            case 'l':
                config->length = atoi (optarg);
                break;
            default: /* '?' */
                fprintf(stderr, "Usage: %s [-a alphabet] [-l length]\n", argv[0]);
        }
    }
}



int main (int argc, char * argv[]) {
    config_t config = {
        .alph = "abc",
        .length = 3,
        .brute_mode = BM_REC,
    };
    
    parse_params (&config, argc, argv);

    switch (config.brute_mode)
    {
        case BM_REC:
        {
            char password[config.length + 1];
            password[config.length] = 0;
            
            rec_brute(password, 0, &config);
            break;
        }
        case BM_ITER:
            ite_brute(&config);
            break;
    }
    return (EXIT_SUCCESS);
}

